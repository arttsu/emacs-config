(straight-use-package 'org-plus-contrib)

(setq MY-ORG-JOURNAL-PATH "~/journal")
(setq MY-ORG-PERSONAL-AGENDA-FILES '("personal_inbox" "personal_projects"))
(setq MY-ORG-WORK-AGENDA-FILES '("work_inbox" "work_projects"))

(defun my-org-journal-file-path (filename)
  (concat MY-ORG-JOURNAL-PATH "/" filename ".org"))

(defun my-org-personal-agenda-files ()
  (mapcar 'my-org-journal-file-path MY-ORG-PERSONAL-AGENDA-FILES))

(defun my-org-work-agenda-files ()
  (mapcar 'my-org-journal-file-path MY-ORG-WORK-AGENDA-FILES))

(defun my-org-agenda-files (mode)
  (cond ((eq mode 'personal) (my-org-personal-agenda-files))
        ((eq mode 'work) (my-org-work-agenda-files))))

(defun my-org-set-agenda-mode (mode)
  (progn
    (setq my-org-agenda-mode mode)
    (setq org-agenda-files (my-org-agenda-files mode))))

(defun my-org-toggle-agenda-mode ()
  (interactive)
  (progn
    (cond ((eq my-org-agenda-mode 'personal) (my-org-set-agenda-mode 'work))
          ((eq my-org-agenda-mode 'work) (my-org-set-agenda-mode 'personal)))
    (when (derived-mode-p 'org-agenda-mode) (org-agenda-redo))))

(defun my-copy-src-message (src)
  (let ((lines (split-string src "\n")))
    (if (> (length lines) 2)
        (concat "Copied:\n\n" (nth 0 lines) "\n" (nth 1 lines) "\n  ...")
        (concat "Copied:\n\n" src))))

(defun my-copy-src (context)
  (let* ((info (org-babel-lob-get-info context))
         (info (if info (copy-tree info) (org-babel-get-src-block-info)))
         (src (nth 1 info)))
    (progn
      (kill-new src)
      (message (my-copy-src-message src)))))

(defun my-copy-link (context)
  (let* ((plist (nth 1 context))
         (raw-link (plist-get plist ':raw-link)))
    (progn
      (kill-new raw-link)
      (message (concat "Copied:\n\n" raw-link)))))

(defun my-smart-copy ()
  (interactive)
  (let* ((context (org-element-context))
         (context-type (nth 0 context)))
    (cond ((eq context-type 'src-block) (my-copy-src context))
          ((eq context-type 'link) (my-copy-link context))
          (t (message "Nothing to copy")))))

(use-package org
  :demand
  :custom
  (org-log-into-drawer t)
  (org-refile-targets '((org-agenda-files :maxlevel . 2)))
  (org-todo-keywords '((sequence "TODO(t)" "ON HOLD(h)" "|" "DONE(d)" "CANCELED(c)")))
  :config
  (my-org-set-agenda-mode 'personal)
  (advice-add 'org-agenda-goto :after ; https://emacs.stackexchange.com/questions/17797/how-to-narrow-to-subtree-in-org-agenda-follow-mode
              (lambda (&rest args)
                (org-narrow-to-subtree)))
  :bind
  (("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c l" . org-store-link)
   ("C-c t" . my-org-toggle-agenda-mode)
   :map org-mode-map
   ("C-c y" . my-smart-copy)
   ([M-down-mouse-3] . 'mouse-set-point)
   ([M-mouse-3] . 'my-smart-copy)))

(defun my-org-find-heading (heading)
  (re-search-forward (concat "^" heading "$") nil t))

(defun my-org-find-or-create-heading (heading)
  (progn
    (goto-char (point-min))
    (when (not (my-org-find-heading heading))
      (goto-char (point-max))
      (open-line 1)
      (insert heading))))

(defun my-org-find-or-create-inbox-heading ()
  (my-org-find-or-create-heading (format-time-string "* %Y W%V")))

(defun my-org-find-inbox-file ()
  (let ((filename (cond ((eq my-org-agenda-mode 'personal) "personal_inbox")
                        ((eq my-org-agenda-mode 'work) "work_inbox"))))
    (set-buffer (org-capture-target-buffer (my-org-journal-file-path filename)))))

(defun my-org-inbox-capture ()
  (progn
    (my-org-find-inbox-file)
    (my-org-find-or-create-inbox-heading)))

(customize-set-variable 'org-capture-templates
  `(("j" "Journal")
    ("jt" "Todo" entry
     (function my-org-inbox-capture)
     (file "~/emacs_config/capture-templates/todo.txt"))
    ("jn" "Note" entry
     (function my-org-inbox-capture)
     (file "~/emacs_config/capture-templates/note.txt"))))

(setq org-super-agenda-groups
      '((:name "Schedule"
               :time-grid t
               :order 0)
        (:name "High priority"
               :and (:priority> "B" :file-path "personal-inbox.org")
               :and (:priority> "B" :file-path "work-inbox.org")
               :order 1)
        (:auto-parent t
                      :order 10)))
(use-package org-super-agenda
  :after org
  :hook
  (org-agenda-mode . org-super-agenda-mode)
  :bind
  (:map org-super-agenda-header-map
        ("j" . org-agenda-next-line)
        ("k" . org-agenda-previous-line)))
